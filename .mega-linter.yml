# Mega-Linter Configuration File
# https://megalinter.io/latest/config-file/

# Activates formatting and autofix
APPLY_FIXES: none

# Flag to clear files from report folder before starting the linting process
CLEAR_REPORT_FOLDER: true

# List of disabled descriptors keys
# https://megalinter.io/latest/config-activation/
DISABLE:
  - COPYPASTE
  - SPELL
  - SNAKEMAKE

# Flag to have the linter complete with exit code 0 even if errors were detected
DISABLE_ERRORS: false

# List of disabled linters keys
# https://megalinter.io/latest/config-activation/
DISABLE_LINTERS:
  - JAVASCRIPT_STANDARD
  - JSON_V8R
  - MARKDOWN_MARKDOWN_LINK_CHECK
  - MARKDOWN_MARKDOWN_TABLE_FORMATTER
  - REPOSITORY_KICS
  - REPOSITORY_SEMGREP
  - TYPESCRIPT_STANDARD
  - YAML_V8R

# List of enabled but not blocking linters keys
# https://megalinter.io/latest/config-activation/
# DISABLE_ERRORS_LINTERS: []

# List of enabled descriptors keys
# https://megalinter.io/latest/config-activation/
# If you use ENABLE variable, all other linters will be disabled by default
# ENABLE: []

# List of enabled linters keys
# If you use ENABLE_LINTERS variable, all other linters will be disabled
# ENABLE_LINTERS: []

# List of excluded directory basenames.
EXCLUDED_DIRECTORIES:
  - .git
  - coverage
  - dist
  - megalinter-reports
  - node_modules
  - reports

# If set to true, MegaLinter fails if a linter is missing in the selected flavor
FAIL_IF_MISSING_LINTER_IN_FLAVOR: false

# If set to true, MegaLinter fails if a linter or formatter has autofixed
# sources, even if there are no errors
FAIL_IF_UPDATED_SOURCES: false

# Upload reports to file.io
FILEIO_REPORTER: false

# Regular expression defining which files will be excluded from linting
# E.g.: `.*src/test.*`
# FILTER_REGEX_EXCLUDE: .*src/test.*

# Regular expression defining which files will be processed by linters
# E.g.: `.*src/.*`
# FILTER_REGEX_INCLUDE: .*src/.*

# Provides suggestions about different MegaLinter flavors to use to improve
# runtime performance
FLAVOR_SUGGESTIONS: true

# Formatter errors will be reported as errors (and not warnings) if this
# variable is set to false
FORMATTERS_DISABLE_ERRORS: false

# If set, calls git with Authorization: Bearer+value
# GIT_AUTHORIZATION_BEARER:

# URL where the github API can be reached
# Must be overridden if using GitHub Enterprise
# GITHUB_API_URL: https://api.github.com

# Posts a comment on the pull request with linting results
GITHUB_COMMENT_REPORTER: true

# URL of the GitHub instance
# Must be overridden if using GitHub Enterprise Server
# GITHUB_SERVER_URL: https://github.com

# Sets pull request status checks on GitHub
GITHUB_STATUS_REPORTER: true

# Base directory for REPORT_OUTPUT_FOLDER, for user-defined linter rules
# location, for location of linted files if DEFAULT_WORKSPACE isn't set
# GITHUB_WORKSPACE:

# If set to true, MegaLinter will skip files containing @generated marker but
# without @not-generated marker (more info at https://generated.at)
IGNORE_GENERATED_FILES: true

# If set to true, MegaLinter will skip files ignored by git using .gitignore
IGNORE_GITIGNORED_FILES: true

# JavaScript default style to check/apply
JAVASCRIPT_DEFAULT_STYLE: prettier

# Directory for all linter configuration rules
# Can be a local folder or a remote URL
# (ex: https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules)
# LINTER_RULES_PATH:

# How much output the script will generate to the console. One of INFO, DEBUG,
# WARNING or ERROR.
LOG_LEVEL: INFO

# Markdown default style to check/apply
MARKDOWN_DEFAULT_STYLE: markdownlint

# Generate Markdown summary report
MARKDOWN_SUMMARY_REPORTER: true

# Name of the Markdown summary report file
MARKDOWN_SUMMARY_REPORTER_FILE_NAME: summary.md

# Comma-separated list of files to analyze. Using this variable will bypass
# other file listing methods
# MEGALINTER_FILES_TO_LINT: []

# Process linters in parallel to improve overall MegaLinter performance. If
# true, linters of same language or formats are grouped in the same parallel
# process to avoid lock issues if fixing the same files
PARALLEL: true

# All available cores are used by default. If there are too many, you need to
# decrease the number of used cores in order to enhance performance
# PARALLEL_PROCESS_NUMBER: 4

# List of plugin urls to install and run during MegaLinter run
# PLUGINS: []

# Custom bash commands to run after linters
# POST_COMMANDS:
#   - command: echo "This is MegaLinter POST_COMMAND on own MegaLinter ! :)"
#     cwd: "workspace"

# Custom bash commands to run before linters
PRE_COMMANDS:
  - command: |
      npm -g install \
        prettier
    cwd: workspace

# Enable printing alpaca image to console
PRINT_ALPACA: true

# Display all files analyzed by the linter instead of only the number
PRINT_ALL_FILES: false

# Set to simple to avoid external images in generated markdown
REPORTERS_MARKDOWN_TYPE: advanced

REPOSITORY_GRYPE_CONFIG_FILE: .grype.yml

# Additional list of secured environment variables to hide when calling linters.
# SECURED_ENV_VARIABLES: []

# Displays elapsed time in reports
SHOW_ELAPSED_TIME: true

# Displays all disabled linters mega-linter could have run
SHOW_SKIPPED_LINTERS: false

# Comma-separated list of cli_lint_modes
# Use if you want to skip linters with some CLI lint modes (ex: file,project)
# Available values: file, cli_lint_mode, project
# SKIP_CLI_LINT_MODES: []

# Typescript default style to check/apply
TYPESCRIPT_DEFAULT_STYLE: prettier

# Will parse the entire repository and find all files to validate
# When set to false, only new or edited files will be parsed for validation
VALIDATE_ALL_CODEBASE: true
